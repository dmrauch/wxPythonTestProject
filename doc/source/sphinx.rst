Sphinx
======

Sphinx is a documentation system which can be used to both write documentation manually as well as automatically generate API documentations from the source code. It uses the reStructuredText (reST) markup language and can compile the documentation in various formats, including html and LaTeX.

.. contents:: Table of Contents


Setting Up the Documentation
----------------------------

In the project root folder, i.e. ``<wxPythonTestProject>``, create a folder ``doc`` for the documentation.

.. code:: bash

  (env) $ cd doc
  (env) $ sphinx-quickstart

I use separate ``source`` and ``build`` folders.


Useful Tips and Tricks
----------------------


Theme and General Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

I like the Read the Docs Sphinx theme and also like to use the ``todo`` extension. To use them, install the theme if necessary

.. code:: bash

  (env) $ pip install sphinx-rtd-theme

change the ``<wxPythonTestProject>/doc/source/conf.py`` to load both extensions

.. code:: python

  import sphinx_rtd_theme

  extensions = [
    'sphinx_rtd_theme',
    'sphinx.ext.todo'
  ]

and activate the theme

.. code:: python

  # html_theme = 'alabaster'
  html_theme = 'sphinx_rtd_theme'

Further resources on the Read the Docs Sphinx theme:

- https://sphinxthemes.com/themes/read-the-docs
- GitHub project page: https://github.com/readthedocs/sphinx_rtd_theme
- Sphinx documentation: https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html



Project README.rst in the Sphinx Documentation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Based on https://stackoverflow.com/questions/10199233/can-sphinx-link-to-documents-that-are-not-located-in-directories-below-the-root.

In the documentation source folder, ``<wxPythonTestProject>/doc/source``, add a file ``readmeLink.rst`` which only just contains the following line:

.. code:: rst

  .. include:: ../../README.rst

Include the file ``readmeLink.rst`` in the toctree of ``index.rst`` (or whichever is the name of main documentation file). Finally, create a ``README.rst`` in the project root folder ``<wxPythonTestProject>`` and use regular ReST syntax.



Autogenerated Source Code / API Documentation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In order for Sphinx to be able to find the source code files, the project root folder has to be made available in the ``conf.py`` file:

.. code:: python

  # -- Path setup --------------------------------------------------------------

  # If extensions (or modules to document with autodoc) are in another directory,
  # add these directories to sys.path here. If the directory is relative to the
  # documentation root, use os.path.abspath to make it absolute, like shown here.

  import os
  import sys
  sys.path.insert(0, os.path.abspath('../..'))

The generation of the automated API documentation is handled by the ``autodoc`` `extension <https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`_. If you'd like to have links between the documentation and the source code, then add the ``sphinx.ext.viewcode`` `extension <https://www.sphinx-doc.org/en/master/usage/extensions/viewcode.html>`_.

.. code:: python

  extensions = [
    # ...
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode'   # for links between documentation and source code
    # ...
  ]

In the source code, use Sphinx-style docstrings, as described in

- https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html
- https://thomas-cokelaer.info/tutorials/sphinx/docstring_python.html
- https://www.datacamp.com/community/tutorials/docstrings-python

An example docstring could look like this:

.. code:: python

  def menuHelpAbout_onClick(self, event):
    """
    Show a message dialog box

    :param self: Self-reference to the class
    :type self: :class:`MainWindow`
    :param event: The event that was triggered
    :type event: :class:`wx.Event`

    :raises: Perhaps this function could throw an exception

    :returns: Nothing
    :rtype: My function doesn't return anything

    Here in this message dialog box, some information about the application could be displayed.
    This could include a description, a version number and possibly also a link to the GitHub repo.

    :example: This is some example, hopefully useful to many people.

    And besides that, I can write a whole lot more.

    .. seealso:: Always try to look beyond the horizon!
    .. warning:: Some warning - be careful
    .. note:: Some note to the reader
    .. todo:: Some todo item
    """

Finally, inside a reST file, you have to explicitly indicate the module, classes and functions that you would like to document. This is different from ``doxygen``. This could look like this:

.. code:: rst

  :mod:`wxPythonTestProject`
  ==========================

  .. automodule:: wxPythonTestProject
    :members:
    :private-members:
    :special-members:
    :undoc-members:

For further details see:

- autodoc: https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html
- viewdoc: https://www.sphinx-doc.org/en/master/usage/extensions/viewcode.html

It does not seem easily possible to generate API summary tables and put them in front of the full API documentation. Summary tables can in principle be generated with ``sphinx.ext.autosummary``, but by default, inherited members are listed, possibly blowing up the summary tables in size, and it is not easily possible to change this behaviour. Likewise, I am not sure how to mix the summary tables and the full API documentation, as is done e.g. by ``Doxygen``.

- https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html
- https://stackoverflow.com/questions/43983799/how-to-avoid-inherited-members-using-autosummary-and-custom-templates
