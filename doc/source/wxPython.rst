wxPython
========

This is a chapter about the wxPython bindings to the wxWidgets GUI framework.

.. contents:: Table of Contents


Resources and References
------------------------

- Homepage: https://wxpython.org/
- PyPI project page: https://pypi.org/project/wxPython/
- API documentation: https://docs.wxpython.org/

  - Stock icons and bitmaps:
  
    - https://wxpython.org/Phoenix/docs/html/stock_items.html
    - https://wxpython.org/Phoenix/docs/html/wx.ArtProvider.html

- Wiki: https://wiki.wxpython.org/

  - Getting started: https://wiki.wxpython.org/Getting%20Started
  - List of events: https://wiki.wxpython.org/ListOfEvents



Internationalisation
--------------------

Resources:

- https://wxpython.org/Phoenix/docs/html/internationalization.html
  The downside of this approach is that the language can only be set once during application start-up.
- https://wxpython.org/Phoenix/docs/html/wx.Language.enumeration.html
  List of languages in ``wxPython``
- https://groups.google.com/g/wxpython-users/c/RQRkfjWmhNc
  Mixed approach between wx-based and direct Python localisation. This allows for switching of the language while the application is still running. A possible problem can be the messages generated by wxPython itself, e.g. in :class:`wx.MessageDialog`, but at least in this example, the messages can be manually passed (``Set*Label`` in https://wxpython.org/Phoenix/docs/html/wx.MessageDialog.html) and therefore can be translated again. However, for switching back and forth between all languages, an English ``.mo`` file has to be provided as well. Worse than that, I know of no mechanism for automatically refreshing all labels as well as short and long help strings after a run-time change of language. So the only way out would be to manually write a function for doing this individually element by element. And last and by far worst, there is no way of changing the labels of the top-level menubar (in contrast to the dropdown lists expanding from the top-level menubar) and there also seems to be a bug in ``SetShortHelp`` (at least for toolmenu buttons). This is why I don't bother with this dynamic translation anymore and only just use the start-up time version (either wx-based or direct Python).


In order to internationalise your program, use the ``_( )`` macro, i.e. all the strings eligible for translation should look like ``_(u"some string")``. Then run

.. code:: bash

  pygettext -a -d wxPythonTestProject -p locale wxPythonTestProject.py

This creates the file ``locale/wxPythonTestProject.pot`` which is a template for the individual translations to the various languages. For example, copy this file to ``locale/de/LC_MESSAGES/wxPythonTestProject.po`` and fill in the translations. Then, do:

.. code:: bash

  msgfmt locale/de/LC_MESSAGES/wxPythonTestProject.po -o locale/de/LC_MESSAGES/wxPythonTestProject.mo

Further modification to the source code are:

.. code:: python

  # at the beginning of the module
  import builtins
  builtins.__dict__['_'] = wx.GetTranslation

  # MainWindow class definition
  # [...]

  if __name__ == "__main__":
    app = wx.App(redirect = False)

    # internationalisation stuff
    wx.Locale.AddCatalogLookupPathPrefix("locale")
    # language = wx.LANGUAGE_ENGLISH
    language = wx.LANGUAGE_GERMAN
    app.locale = wx.Locale(language)
    app.locale.AddCatalog("wxPythonTestProject")

    frame = MainWindow()
    app.MainLoop()

.. note:: When done like this, the language is obviously hardcoded.
          Of course it is much more convenient to expose this choice via a settings configuration made persistent across application restarts.
